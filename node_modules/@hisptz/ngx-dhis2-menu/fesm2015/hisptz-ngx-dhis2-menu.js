import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { Injectable, Component, Input, Directive, ElementRef, Output, EventEmitter, HostListener, Pipe, NgModule, defineInjectable, inject } from '@angular/core';
import { BehaviorSubject, Observable, forkJoin, of, timer, throwError } from 'rxjs';
import { switchMap, tap, catchError, filter } from 'rxjs/operators';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { each, filter as filter$1 } from 'lodash';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ PREDEFINED_MENU_ITEMS = [
    {
        name: 'Data element',
        namespace: 'data-element',
        defaultAction: 'dhis-web-maintenance/#/list/dataElementSection',
        displayName: 'Data element',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A unit of analysis and member of datasets',
        onlyShowOnSearch: true
    },
    {
        name: 'Data element group',
        namespace: 'data-element-group',
        defaultAction: 'dhis-web-maintenance/#/list/dataElementSection/dataElementGroup',
        displayName: 'Data element group',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Groups of data elements for analysis and cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Data element group set',
        namespace: 'data-element-group-set',
        defaultAction: 'dhis-web-maintenance/#/list/dataElementSection/dataElementGroupSet',
        displayName: 'Data element group set',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of groups of data elements used for analysis and cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Indicator',
        namespace: 'indicator',
        defaultAction: 'dhis-web-maintenance/#/list/indicatorSection/indicator',
        displayName: 'Indicator',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A computed value from data elements used for data analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Indicator type',
        namespace: 'indicator-type',
        defaultAction: 'dhis-web-maintenance/#/list/indicatorSection/indicatorType',
        displayName: 'Indicator type',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Type of indicator used as a factor, such as percentages, rates and ratios',
        onlyShowOnSearch: true
    },
    {
        name: 'Indicator group',
        namespace: 'indicator-type',
        defaultAction: 'dhis-web-maintenance/#/list/indicatorSection/indicatorGroup',
        displayName: 'Indicator group',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A group of indicators used for analysis and cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Settings',
        displayName: 'Settings',
        namespace: '/dhis-web-user-profile',
        defaultAction: '/dhis-web-user-profile/#/settings',
        icon: '/icons/usersettings.png',
        description: 'User settings for updating language, theme and notification settings',
        onlyShowOnSearch: true
    },
    {
        name: 'Profile',
        displayName: 'Profile',
        namespace: '/dhis-web-user-profile',
        defaultAction: '/dhis-web-user-profile/#/profile',
        icon: '/icons/function-profile.png',
        description: 'User settings for updating names, email, phone number and other profile details',
        onlyShowOnSearch: true
    },
    {
        name: 'Account',
        displayName: 'Account',
        namespace: '/dhis-web-user-profile',
        defaultAction: '/dhis-web-user-profile/#/account',
        icon: '/icons/function-account.png',
        description: 'User settings for updating account passwords',
        onlyShowOnSearch: true
    },
    {
        name: 'Help',
        displayName: 'Help',
        namespace: '/dhis-web-commons-about',
        defaultAction: 'https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html',
        icon: '/icons/function-account.png',
        description: 'Help and documentation page on using DHIS2',
        onlyShowOnSearch: true
    },
    {
        name: 'About DHIS2',
        displayName: 'About DHIS2',
        namespace: '/dhis-web-commons-about',
        defaultAction: '/dhis-web-commons-about/about.action',
        icon: '/icons/function-about-dhis2.png',
        description: 'Details about running dhis2 versions, database and other setup information',
        onlyShowOnSearch: true
    },
    {
        name: 'Category option',
        displayName: 'Category option',
        namespace: '/dhis-web-category-option',
        defaultAction: '/dhis-web-maintenance/#/list/categorySection/categoryOption',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Disagregation of data elements and data set for cross tabulation on data entry and analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Category',
        displayName: 'Category',
        namespace: '/dhis-web-category',
        defaultAction: '/dhis-web-maintenance/#/list/categorySection/category',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Combination of options used as disaggregation of data elements and datasets for cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Category combination',
        displayName: 'Category combination',
        namespace: '/dhis-web-category-combo',
        defaultAction: '/dhis-web-maintenance/#/list/categorySection/categoryCombo',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Set of combinations of options used as disaggregation of data elements and datasets for cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Category option combination',
        displayName: 'Category option combination',
        namespace: '/dhis-web-category-option-combination',
        defaultAction: '/dhis-web-maintenance/#/list/categorySection/categoryOptionCombo',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Generated individual disaggregation/cross-tabulations based on category combination',
        onlyShowOnSearch: true
    },
    {
        name: 'Category option group',
        displayName: 'Category option group',
        namespace: '/dhis-web-category-option-group',
        defaultAction: ' /dhis-web-maintenance/#/list/categorySection/categoryOptionGroup',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Group of options used for cross tabulation during data analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Category option groupset',
        displayName: 'Category option groupset',
        namespace: '/dhis-web-category-option-groupset',
        defaultAction: '/dhis-web-maintenance/#/list/categorySection/categoryOptionGroupSet',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of groups of options used for cross tabulation during data analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Data set',
        displayName: 'Data set',
        namespace: '/dhis-web-data-set',
        defaultAction: '/dhis-web-maintenance/#/list/dataSetSection/dataSet',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of data elements used for data collection and reporting rates/data submission',
        onlyShowOnSearch: true
    },
    {
        name: 'Indicator group set',
        displayName: 'Indicator group set',
        namespace: '/dhis-web-indicator-group-set',
        defaultAction: '/dhis-web-maintenance/#/list/indicatorSection/indicatorGroupSet',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of groups of indicators used for analysis and cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Program indicator',
        displayName: 'Program indicator',
        namespace: '/dhis-web-program-indicator',
        defaultAction: '/dhis-web-maintenance/#/list/indicatorSection/programIndicator',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Computed values based on formula of data from events and tracker data used for analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Program indicator group',
        displayName: 'Program indicator group',
        namespace: '/dhis-web-program-indicator-group',
        defaultAction: '/dhis-web-maintenance/#/list/indicatorSection/programIndicatorGroup',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Group of computed values based on formula of data from events and tracker data used of analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Organisation unit',
        displayName: 'Organisation unit',
        namespace: '/dhis-web-organisation-unit',
        defaultAction: '/dhis-web-maintenance/#/list/organisationUnitSection/organisationUnit',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Unit of data collection in reporting hierarchy, "WHERE" data is collected',
        onlyShowOnSearch: true
    },
    {
        name: 'Organisation unit group',
        displayName: 'Organisation unit group',
        namespace: '/dhis-web-organisation-unit-group',
        defaultAction: '/dhis-web-maintenance/#/list/organisationUnitSection/organisationUnitGroup',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Group of units of data collection in reporting hierarchy used for analysis and cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Organisation unit group set',
        displayName: 'Organisation unit group set',
        namespace: '/dhis-web-organisation-unit-group-set',
        defaultAction: '/dhis-web-maintenance/#/list/organisationUnitSection/organisationUnitGroupSet',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of groups of organisation units used for analysis and cross tabulation',
        onlyShowOnSearch: true
    },
    {
        name: 'Organisation unit level',
        displayName: 'Organisation unit level',
        namespace: '/dhis-web-organisation-unit-level',
        defaultAction: '/dhis-web-maintenance/#/list/organisationUnitSection/organisationUnitLevel',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Levels of organisaion units in a hierarchy of reporting',
        onlyShowOnSearch: true
    },
    {
        name: 'Hierarchy operations',
        displayName: 'Hierarchy operations',
        namespace: '/dhis-web-hierarchy-operations',
        defaultAction: '/dhis-web-maintenance/#/organisationUnitSection/hierarchy',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Operations for moving organisation units within between parents within the hierarchy',
        onlyShowOnSearch: true
    },
    {
        name: 'Program',
        displayName: 'Program',
        namespace: '/dhis-web-program',
        defaultAction: '/dhis-web-maintenance/#/list/programSection/program',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of data collection configurations for capturing events and tracker data',
        onlyShowOnSearch: true
    },
    {
        name: 'Tracked entity attribute',
        displayName: 'Tracked entity attribute',
        namespace: '/dhis-web-tracked-entity-attribute',
        defaultAction: '/dhis-web-maintenance/#/list/programSection/trackedEntityAttribute',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Properties/details of an entity/person/sample/case being tracked in tracker program',
        onlyShowOnSearch: true
    },
    {
        name: 'Relationship type',
        displayName: 'Relationship type',
        namespace: '/dhis-web-relationship-type',
        defaultAction: '/dhis-web-maintenance/#/list/programSection/relationshipType',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Types or nature of relationship between entities/person/sample/cases being tracked in tracker program',
        onlyShowOnSearch: true
    },
    {
        name: 'Tracked entity',
        displayName: 'Tracked entity',
        namespace: '/dhis-web-',
        defaultAction: '/dhis-web-maintenance/#/list/programSection/trackedEntity',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Entity/person/sample/case being tracked in a tracker program',
        onlyShowOnSearch: true
    },
    {
        name: 'Program rule',
        displayName: 'Program rule',
        namespace: '/dhis-web-program-rule',
        defaultAction: '/dhis-web-maintenance/#/list/programSection/programRule',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Rules/Criterials for enforcing validations or expected behaviors in tracker program',
        onlyShowOnSearch: true
    },
    {
        name: 'Program rule variable',
        displayName: 'Program rule variable',
        namespace: '/dhis-web-program-rule-variable',
        defaultAction: '/dhis-web-maintenance/#/list/programSection/programRuleVariable',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Variables/expressions in rules used to evaluate conditions and creatirias in validation',
        onlyShowOnSearch: true
    },
    {
        name: 'Validation rule',
        displayName: 'Validation rule',
        namespace: '/dhis-web-validation-rule',
        defaultAction: '/dhis-web-maintenance/#/list/validationSection/validationRule',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Rules used for data validation in data entry',
        onlyShowOnSearch: true
    },
    {
        name: 'Validation notification',
        displayName: 'Validation notification',
        namespace: '/dhis-web-validation-notification',
        defaultAction: '/dhis-web-maintenance/#/list/validationSection/validationNotificationTemplate',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Notification templates for messages on fullfilment of a validation rule',
        onlyShowOnSearch: true
    },
    {
        name: 'Constant',
        displayName: 'Constant',
        namespace: '/dhis-web-constant',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/constant',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A fixed value used accross indicators and data sets',
        onlyShowOnSearch: true
    },
    {
        name: 'Attribute',
        displayName: 'Attribute',
        namespace: '/dhis-web-attribute',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/attribute',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Fields for extending additional properties for capturing information related to data captured in DHIS2',
        onlyShowOnSearch: true
    },
    {
        name: 'Option set',
        displayName: 'Option set',
        namespace: '/dhis-web-option-set',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/optionSet',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A set of choices to be offered as drop down selection menu for data entry and analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Legend',
        displayName: 'Legend',
        namespace: '/dhis-web-legend',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/legendSet',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'A predefined range of colors used and key of colors for data analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Predicator',
        displayName: 'Predictor',
        namespace: '/dhis-web-predictor',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/predictor',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Rule for calculation of predicted value based on prediction formula',
        onlyShowOnSearch: true
    },
    {
        name: 'Push analysis',
        displayName: 'Push analysis',
        namespace: '/dhis-web-push-analysis',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/pushAnalysis',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Settings for pushing list of analysis dashboards to users mails and defined schedule',
        onlyShowOnSearch: true
    },
    {
        name: 'External map layer',
        displayName: 'External map layer',
        namespace: '/dhis-web-',
        defaultAction: '/dhis-web-maintenance/#/list/otherSection/externalMapLayer',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Configuration of external rastor imagery layers for map overalys',
        onlyShowOnSearch: true
    },
    {
        name: 'Group editor',
        displayName: 'Group editor',
        namespace: '/dhis-web-group-editor',
        defaultAction: '/dhis-web-maintenance/#/group-editor',
        icon: 'icons/dhis-web-maintenance.png',
        description: 'Editing tool for management of group assignments',
        onlyShowOnSearch: true
    },
    {
        name: 'Resource table',
        displayName: 'Resource table',
        namespace: '/dhis-web-resource-table',
        defaultAction: '/dhis-web-maintenance-dataadmin/displayResourceTableForm.action',
        icon: '/icons/dhis-web-maintenance-dataadmin.png',
        description: 'Table for holding auto generated resources needed for reports and analytics tools',
        onlyShowOnSearch: true
    },
    {
        name: 'Cache administration',
        displayName: 'Cache administration',
        namespace: '/dhis-web-cache-administration',
        defaultAction: '/dhis-web-maintenance-dataadmin/displayMaintenanceForm.action',
        icon: '/icons/dhis-web-maintenance-dataadmin.png',
        description: 'Clearing of server cache, update changes made and for reloading apps',
        onlyShowOnSearch: true
    },
    {
        name: 'Schedule management',
        displayName: 'Schedule management',
        namespace: '/dhis-web-schedule-management',
        defaultAction: '/dhis-web-maintenance-dataadmin/viewScheduledTasks.action',
        icon: '/icons/dhis-web-maintenance-dataadmin.png',
        description: 'Management of schedule for running analytics and resource tables creation',
        onlyShowOnSearch: true
    },
    {
        name: 'Analytics management',
        displayName: 'Analytics management',
        namespace: '/dhis-web-schedule-management',
        defaultAction: '/dhis-web-reporting/displayDataMartForm.action',
        icon: '/icons/dhis-web-maintenance-dataadmin.png',
        description: 'Running analytics on demand and configuration of analytics before running',
        onlyShowOnSearch: true
    },
    {
        name: 'Standard reports',
        displayName: 'Standard reports',
        namespace: '/dhis-web-standard-reports',
        defaultAction: '/dhis-web-reporting/displayViewReportForm.action',
        icon: '/icons/dhis-web-reporting.png',
        description: 'Customized single page reports for personalized/customized report outputs',
        onlyShowOnSearch: true
    },
    {
        name: 'Dataset reports',
        displayName: 'Dataset reports',
        namespace: '/dhis-web-dataset-reports',
        defaultAction: '/dhis-web-reporting/showDataSetReportForm.action',
        icon: '/icons/dhis-web-reporting.png',
        description: 'Routine reports based on data entry forms layouts aggregated accross hierarchy and periods',
        onlyShowOnSearch: true
    },
    {
        name: 'Reporting rates',
        displayName: 'Reporting rates',
        namespace: '/dhis-web-reporting rates',
        defaultAction: '/dhis-web-reporting/displayViewDataCompletenessForm.action',
        icon: '/icons/dhis-web-reporting.png',
        description: 'Reports showing completeness and timelineness of submissions of datasets',
        onlyShowOnSearch: true
    },
    {
        name: 'Organisation unit report',
        displayName: 'Organisation unit report',
        namespace: '/dhis-web-organisation-unit-report',
        defaultAction: '/dhis-web-reporting/displayOrgUnitDistribution.action',
        icon: '/icons/dhis-web-reporting.png',
        description: 'Reports showing distribution of organisation units by groups and groupsets, e.g. ownership and types',
        onlyShowOnSearch: true
    },
    {
        name: 'Resources',
        displayName: 'Resources',
        namespace: '/dhis-web-resources',
        defaultAction: '/dhis-web-reporting/displayViewDocumentForm.action',
        icon: '/icons/dhis-web-reporting.png',
        description: 'Archive of files and other resources uploaded for reference purposes',
        onlyShowOnSearch: true
    },
    {
        name: 'Data approval',
        displayName: 'Data approval',
        namespace: '/dhis-web-data-approval',
        defaultAction: '/dhis-web-reporting/showDataApprovalForm.action',
        icon: '/icons/dhis-web-reporting.png',
        description: 'Approval and analysis of trend and rate of data approval',
        onlyShowOnSearch: true
    },
    {
        name: 'SQL Views',
        displayName: 'SQL Views',
        namespace: '/dhis-web-sql-views',
        defaultAction: '/dhis-web-maintenance-dataadmin/sqlView.action',
        icon: '/icons/dhis-web-maintenance-dataadmin.png',
        description: 'Management, generation and use of SQL views for csv data analysis',
        onlyShowOnSearch: true
    },
    {
        name: 'Data statistics',
        displayName: 'Data statistics',
        namespace: '/dhis-web-data-statistics',
        defaultAction: '/dhis-web-maintenance-dataadmin/viewStatistics.action',
        icon: '/icons/dhis-web-maintenance-dataadmin.png',
        description: 'Statistics on creation of metadata and datavalues in the database',
        onlyShowOnSearch: true
    }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MENU_BACKGROUND_COLORS = {
    green: '#467e4a',
    light_blue: '#276696',
    india: '#ea5911',
    myanmar: '#276696',
    vietnam: '#b40303'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ PROFILE_MENUS = [
    {
        name: 'Settings',
        namespace: '/dhis-web-user-profile',
        defaultAction: '/dhis-web-user-profile/#/settings',
        icon: 'icons/usersettings.png',
        description: ''
    },
    {
        name: 'Profile',
        namespace: '/dhis-web-user-profile',
        defaultAction: '/dhis-web-user-profile/#/profile',
        icon: 'icons/function-profile.png',
        description: ''
    },
    {
        name: 'Account',
        namespace: '/dhis-web-user-profile',
        defaultAction: '/dhis-web-user-profile/#/account',
        icon: 'icons/function-account.png',
        description: ''
    },
    {
        name: 'Help',
        namespace: '/dhis-web-commons-about',
        defaultAction: 'https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html',
        icon: 'icons/function-account.png',
        description: ''
    },
    {
        name: 'About Dhis2',
        namespace: '/dhis-web-commons-about',
        defaultAction: '/dhis-web-commons-about/about.action',
        icon: 'icons/function-about-dhis2.png',
        description: ''
    }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._menuModules$ = new BehaviorSubject([]);
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    getSystemSettings(rootUrl) {
        return Observable.create(observer => {
            forkJoin(this.httpClient.get(rootUrl + 'api/systemSettings.json'), this.httpClient.get(rootUrl + 'api/system/info.json')).subscribe((settings) => {
                observer.next(Object.assign({}, settings[0], settings[1]));
                observer.complete();
            }, () => observer.error(null));
        });
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    getMenuModules(rootUrl) {
        return Observable.create(observer => {
            this.httpClient.get(rootUrl + 'dhis-web-commons/menu/getModules.action').subscribe((menuModuleResult) => {
                const /** @type {?} */ sanitizedMenu = this._sanitizeMenuItems(menuModuleResult.modules, rootUrl);
                this._menuModules$.next(sanitizedMenu);
                observer.next(sanitizedMenu);
                observer.complete();
            }, () => {
                observer.next(null);
                observer.complete();
            });
        });
    }
    /**
     * @return {?}
     */
    getSanitizedMenus() {
        return this._menuModules$.asObservable();
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    getUserInfo(rootUrl) {
        return Observable.create(observer => {
            this.httpClient.get(rootUrl + 'api/me.json').subscribe((userInfo) => {
                observer.next(userInfo);
                observer.complete();
            }, () => {
                observer.next(null);
                observer.complete();
            });
        });
    }
    /**
     * @param {?} menuItems
     * @param {?} rootUrl
     * @return {?}
     */
    _sanitizeMenuItems(menuItems, rootUrl) {
        const /** @type {?} */ sanitizedMenuItems = menuItems.map((item) => {
            const /** @type {?} */ newItem = Object.assign({}, item);
            if (!newItem.hasOwnProperty('displayName') ||
                newItem.displayName === '') {
                newItem.displayName = newItem.name;
            }
            if (newItem.defaultAction.indexOf('http') === -1) {
                newItem.defaultAction = '../../' + newItem.defaultAction;
            }
            if (newItem.icon.indexOf('http') === -1) {
                newItem.icon = '../../' + newItem.icon;
            }
            newItem.onlyShowOnSearch = false;
            return newItem;
        });
        const /** @type {?} */ predefinedMenuItems = PREDEFINED_MENU_ITEMS.map((item) => {
            const /** @type {?} */ newItem = Object.assign({}, item);
            if (newItem.defaultAction) {
                newItem.defaultAction = rootUrl + newItem.defaultAction;
            }
            if (newItem.icon) {
                newItem.icon = rootUrl + newItem.icon;
            }
            return newItem;
        });
        return [...sanitizedMenuItems, ...predefinedMenuItems];
    }
}
MenuService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
MenuService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ MenuService.ngInjectableDef = defineInjectable({ factory: function MenuService_Factory() { return new MenuService(inject(HttpClient)); }, token: MenuService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SystemStateService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._loggingStatus$ = new BehaviorSubject(true);
    }
    /**
     * @return {?}
     */
    checkOnlineStatus() {
        return timer(1000, 30000).pipe(switchMap(() => of(navigator.onLine)), tap((onlineStatus) => {
            this._checkLoginStatus(onlineStatus);
        }));
    }
    /**
     * @param {?} isOnline
     * @return {?}
     */
    _checkLoginStatus(isOnline) {
        if (isOnline) {
            this.pingServer().subscribe((pingResult) => {
                this._loggingStatus$.next(pingResult.loggedIn);
            }, (error) => {
                if (isOnline) {
                    this._loggingStatus$.next(false);
                }
            });
        }
        else {
            this._loggingStatus$.next(true);
        }
    }
    /**
     * @return {?}
     */
    getLoginStatus() {
        return this._loggingStatus$.asObservable();
    }
    /**
     * @return {?}
     */
    pingServer() {
        return this.httpClient.get('../../../dhis-web-commons-stream/ping.action');
    }
}
SystemStateService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
SystemStateService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ SystemStateService.ngInjectableDef = defineInjectable({ factory: function SystemStateService_Factory() { return new SystemStateService(inject(HttpClient)); }, token: SystemStateService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuComponent {
    /**
     * @param {?} menuService
     * @param {?} systemStatusService
     */
    constructor(menuService, systemStatusService) {
        this.menuService = menuService;
        this.systemStatusService = systemStatusService;
        this.rootUrl = '../../../';
        this.menuLoading = true;
        this.menuLoadingFail = false;
        this.loggedIn$ = this.systemStatusService.getLoginStatus();
        this.online = false;
        this.menuNotification = '';
        this.wasOffline = true;
        this.backgroundColor = '#ECECEC';
        this.showSidebar = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.systemStatusService.checkOnlineStatus().subscribe((onlineStatus) => {
            this.online = onlineStatus;
            if (this.online && this.wasOffline) {
                this.menuNotification = 'You are online';
                this.wasOffline = false;
                /**
                         * Hide notification status after sometimes
                         */
                setTimeout(() => {
                    this.menuNotification = '';
                }, 3000);
                /**
                         * Load system settings if failed
                         */
                if (this.menuLoadingFail) {
                    this.menuLoading = true;
                    this.getSystemSettings();
                }
            }
            else if (!this.online) {
                this.menuNotification = 'You are offline';
                this.wasOffline = true;
            }
        });
        this.getSystemSettings();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSideBar(e) {
        e.stopPropagation();
        this.showSidebar = !this.showSidebar;
    }
    /**
     * @return {?}
     */
    getSystemSettings() {
        this.menuService.getSystemSettings(this.rootUrl).subscribe((settings) => {
            if (settings) {
                this.applicationTitle = settings['applicationTitle'];
                // get system current background style
                const /** @type {?} */ colorName = settings.hasOwnProperty('currentStyle')
                    ? settings['currentStyle'].split('/')[0]
                    : settings.hasOwnProperty('keyStyle')
                        ? settings['keyStyle'].split('/')[0]
                        : 'blue';
                this.backgroundColor =
                    MENU_BACKGROUND_COLORS[colorName];
                this.contextPath = settings.contextPath ? settings.contextPath + '/' : '';
            }
            this.menuLoading = false;
            this.menuLoadingFail = false;
        }, () => {
            this.menuLoading = false;
            this.menuLoadingFail = true;
        });
    }
}
MenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-dhis2-menu',
                template: `<div class="menu-container">

  <!-- notification area -->
  <div class="menu-notification-area" *ngIf="menuNotification !== ''" [@open]>
    {{ menuNotification }}
  </div>
  <!-- end of notification area -->
  <!-- login form area -->
  <div class="login-form-container" *ngIf="!(loggedIn$ | async)">
    <app-login-form></app-login-form>
  </div>
  <!-- end of login form area -->

  <!--menu loading area-->
  <div class="menu-loader" *ngIf="menuLoading">
    <app-menu-loader></app-menu-loader>
  </div>
  <!--end of menu loading area-->

  <!--menu loading failed area-->
  <div class="menu-content" *ngIf="!menuLoading && menuLoadingFail" style="background-color: #eeeeee">
    &nbsp;
  </div>
  <!--end of menu loading failed area-->

  <!--menu content area-->
  <div class="menu-content" [style.background-color]="backgroundColor" *ngIf="!menuLoading && !menuLoadingFail">
    <!--menu left block-->
    <div class="menu-left-block">

      <!--menu brand area-->
      <div class="menu-brand">
        <a [href]="rootUrl + 'dhis-web-commons-about/redirect.action'">
          <img [src]="rootUrl + 'api/staticContent/logo_banner'" alt="">
        </a>
      </div>
      <!--end of menu brand area-->

      <!--menu title area-->
      <div class="menu-title-block">
        <a [href]="rootUrl + 'dhis-web-commons-about/redirect.action'" class="menu-title">
          {{applicationTitle}}
        </a>
      </div>
      <!--end of menu title area-->
    </div>
    <!--end of menu left block-->

    <!--menu right block-->
    <div class="menu-right-block">
      <div class="menu-notification-block">
        <app-menu-notification [rootUrl]="rootUrl"></app-menu-notification>
      </div>
      <!--menu search block-->
      <div class="menu-search-block">
        <app-menu-search></app-menu-search>
      </div>
      <!--end of menu search block-->

      <!--menu profile block-->
      <div class="menu-profile-block">
        <app-menu-profile [rootUrl]="rootUrl" [contextPath]="contextPath" [backgroundColor]="backgroundColor"></app-menu-profile>
      </div>
      <!--end of menu profile block-->

      <!--menu sidebar toggle button-->
      <div
        class="menu-toggle-button"
      >
        <a
          (click)="toggleSideBar($event)"
        >
          <svg
            class="menu-toggle-icon"
            viewBox="0 0 24 24"
          >
            <path d="M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z"></path>
          </svg>
        </a>
      </div>
      <!--end of menu sidebar toggle button-->

      <!--sidebar menu block-->
      <div class="sidebar-menu-nav" *ngIf="showSidebar">
        <app-menu-side-bar></app-menu-side-bar>
      </div>
      <!--end of sidebar menu block-->
      <div></div>
    </div>
    <!--end of menu right block-->
  </div>
  <!--end of menu content area-->
</div>
`,
                styles: [`.menu-container{position:fixed;left:0;top:0;right:0;z-index:1400;height:48px}.menu-loader{height:100%}.menu-content{display:flex;width:100%;height:100%;justify-content:space-between}.menu-left-block,.menu-right-block{display:flex}.menu-brand{width:155px;height:100%;display:flex;justify-content:center;align-items:center}.menu-brand>a>img{display:block;margin:auto;max-height:44px;max-width:155px}.menu-title-block{overflow:hidden;white-space:nowrap;color:#fff;align-items:center;justify-items:center;display:flex;padding-right:1rem}.menu-title{font-size:1rem;font-weight:700;color:#fff;text-decoration:none;text-overflow:ellipsis;min-width:1px;overflow:hidden;white-space:nowrap}.menu-search-block{height:100%}.login-form-container{position:fixed;z-index:1500;top:2px;left:20%;min-height:42px;border-color:#f0c36d;background-color:#f9edbe;border-radius:3px}.menu-notification-area{position:fixed;z-index:1500;top:7px;left:20%;height:auto;border-color:#f0c36d;background-color:#f9edbe;border-radius:3px;padding:5px;font-size:15px}.menu-toggle-button{display:none;flex-direction:row;justify-content:flex-end;padding-right:10px;padding-top:6px}.menu-toggle-icon{display:inline-block;height:35px;width:35px;fill:#fff}.sidebar-menu-nav{position:absolute;top:100%;width:400px;height:100vh;right:0;z-index:900;font-size:14px;text-align:left;list-style:none;background-color:#fff;-webkit-background-clip:padding-box;transition:width .5s cubic-bezier(.39,-.04,.2,1);background-clip:padding-box;box-shadow:0 6px 12px rgba(0,0,0,.175)}@media (max-width:400px){.sidebar-menu-nav{width:95%}}@media (max-width:500px){.login-form-container{top:50px;left:2%;width:96%;height:auto}.menu-notification-area{left:2%;right:2%;width:96%;height:auto}}@media (max-width:999px){.menu-profile-block,.menu-search-block,.menu-title-block{display:none}.menu-brand{justify-content:flex-start;margin-left:15px}.menu-toggle-button{display:flex}}.menu-notification-block{display:flex;align-items:center;height:100%;margin-right:30px}@media (min-width:1010px){.sidebar-menu-nav{display:none!important}}`],
                animations: [
                    trigger('open', [
                        state('in', style({
                            opacity: 1
                        })),
                        transition('void => *', [
                            style({
                                opacity: 0
                            }),
                            animate(700)
                        ]),
                        transition('* => void', [
                            animate(400),
                            style({
                                opacity: 0
                            })
                        ])
                    ])
                ]
            },] },
];
/** @nocollapse */
MenuComponent.ctorParameters = () => [
    { type: MenuService },
    { type: SystemStateService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ containers = [MenuComponent];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoginFormComponent {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.credentials = {
            username: undefined,
            password: undefined
        };
        this.loginError = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSubmit(e) {
        e.stopPropagation();
        this.loggingIn = true;
        this.loginError = '';
        const /** @type {?} */ headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
        this.httpClient.post('../../../dhis-web-commons-security/login.action', 'j_username=' +
            this.credentials.username +
            '&j_password=' +
            this.credentials.password, {
            headers
        }).pipe(catchError(this._handleError)).subscribe(() => {
            this.loggingIn = false;
        }, (error) => {
            this.loggingIn = false;
            if (error.status === 200 && error.url.indexOf('login') !== -1) {
                this.loginError = 'Incorrect username or password';
            }
        });
    }
    /**
     * @param {?} err
     * @return {?}
     */
    _handleError(err) {
        let /** @type {?} */ error = null;
        if (err.error instanceof Error) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object ? err.error.message : err.error ? err.error : err.message,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        return throwError(error);
    }
}
LoginFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-login-form',
                template: `<form action="" class="login-form" #loginForm="ngForm">
  <input class="login-form-input" type="text" required [(ngModel)]="credentials.username" name="username" #username="ngModel"
    placeholder="Enter username" autofocus tabindex="0">
  <input class="login-form-input" type="password" required [(ngModel)]="credentials.password" name="password" #password="ngModel"
    placeholder="Enter password" autofocus tabindex="1">
  <button class="login-form-button" type="submit" [disabled]="(!password.valid && !username.valid) || loggingIn" (click)="onSubmit($event)"
    tabindex="2">
    {{loggingIn ? 'Logging in ...' : 'Login'}}
  </button>
</form>
<div *ngIf="loginError !== ''" class="login-error-block">{{loginError}}</div>`,
                styles: [`.login-form{display:flex;padding:3px!important;width:100%}.login-form-input{padding-left:7px;display:flex;align-items:center;justify-content:flex-start;margin-right:3px;height:37px;outline:0;border-radius:2px;border:thin solid #ececec}.login-form-button{height:37px;background-color:#fff;border:thin solid #ececec;border-radius:2px;cursor:pointer}.login-error-block{font-size:14px;color:red;padding:5px}@media (max-width:500px){.login-form{display:block}.login-form input{width:100%;margin-bottom:3px;margin-right:0}.login-form button{width:100%;text-align:center}}`]
            },] },
];
/** @nocollapse */
LoginFormComponent.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuSearchComponent {
    /**
     * @param {?} menuService
     */
    constructor(menuService) {
        this.menuService = menuService;
        this.rootUrl = '../../../';
        this.searchWidth = 47;
        this.showApps = false;
        this.apps = [];
        this.originalApps = [];
        this.loadingModules = true;
        this.filteredApp = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menuService
            .getMenuModules(this.rootUrl)
            .subscribe((menuModules) => {
            if (menuModules !== null) {
                this.loadingModules = false;
                this.originalApps = [...menuModules];
                this.apps = this._prepareMenuModules();
            }
        });
    }
    /**
     * @return {?}
     */
    _prepareMenuModules() {
        return this.filteredApp === ''
            ? this.originalApps.filter((menu) => {
                return !menu.onlyShowOnSearch;
            })
            : this.originalApps;
    }
    /**
     * @return {?}
     */
    updateMenuModules() {
        this.apps = this._prepareMenuModules();
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    widdenSearch(e) {
        if (e) {
            e.stopPropagation();
        }
        document.getElementById('menu_search_input').focus();
        this.showApps = true;
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    reduceSearch(e) {
        if (e) {
            e.stopPropagation();
        }
        document.getElementById('menu_search_input').blur();
        this.showApps = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSearch(e) {
        e.stopPropagation();
        if (this.showApps) {
            this.reduceSearch();
        }
        else {
            this.widdenSearch();
        }
    }
}
MenuSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu-search',
                template: `<div class="menu-search-container" appClickOutside (clickOutside)="reduceSearch()">
  <div class="menu-search-icon">
    <svg class="" viewBox="0 0 24 24"
         style="display: inline-block; color: rgba(0, 0, 0, 0.87); fill: white; height: 24px; width: 24px; user-select: none; transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; padding: 0px;">
      <path
        d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
    </svg>
  </div>
  <div class="menu-search-input-block">
    <input type="text" class="menu-search-input" id="menu_search_input" placeholder="Search Apps"
           (focus)="widdenSearch($event)" [(ngModel)]="filteredApp" (ngModelChange)="updateMenuModules()"/>
    <span class="underline"></span>
  </div>
  <div class="menu-toggle-link">
    <a (click)="toggleSearch($event)">
      <svg class="menu-toggle-icon" viewBox="0 0 24 24">
        <path
          d="M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z"></path>
      </svg>
    </a>
  </div>

  <div class="menu-list-block" [@slide] *ngIf="showApps">
    <div *ngIf="(apps | filterByName: filteredApp).length !== 0" class="menu-inner-list-block">
      <a *ngFor="let app of  apps | filterByName:filteredApp" [href]="app.defaultAction" class="app-menu-btn"
         title="{{ app.description }}">
        <div class="app-menu-inner-block">
          <img alt="" [src]="app.icon">
          <div class="app-menu-name">{{app.displayName}}</div>
        </div>
      </a>
    </div>
    <div class="menu-inner-list-block-no-match" *ngIf="(apps | filterByName: filteredApp).length == 0">
      <p>No match found!</p>
    </div>
    <div class="menu-app-management-block">
      <a [href]="rootUrl + 'dhis-web-menu-management/'" class="app-management-btn">
        Manage my Apps
      </a>
    </div>
  </div>
</div>
`,
                styles: [`.menu-search-container{display:flex;position:relative;height:100%}.menu-search-input-block{width:390px}#menu_search_input{padding:0!important;margin:0!important;background-color:transparent;color:#fff!important;float:right;border-style:none;border-bottom:1px solid #f1f1f1;transition:all .2s ease-in-out;display:flex;align-items:center;height:37px;font-size:15px;width:100%}#menu_search_input::-webkit-input-placeholder{color:rgba(255,255,255,.7)}#menu_search_input::-moz-placeholder{color:rgba(255,255,255,.7)}#menu_search_input:-ms-input-placeholder{color:rgba(255,255,255,.7)}#menu_search_input:-moz-placeholder{color:rgba(255,255,255,.7)}#menu_search_input:focus{outline:0}#menu_search_input:focus+.underline{-webkit-transform:scale(1);transform:scale(1)}.underline{background-color:#fff;position:absolute;height:2px;width:390px;bottom:11px;-webkit-transform:scale(0,1);transform:scale(0,1);transition:all .3s linear}.menu-toggle-link{margin:10px}.menu-toggle-link a{cursor:pointer}.menu-toggle-icon{display:block;height:25px;width:25px;fill:#fff}.menu-list-block{position:absolute;display:block;top:49px;width:590px;min-height:430px;right:10px;z-index:-1000;font-size:14px;text-align:left;list-style:none;background-color:#fff;box-shadow:0 0 3px rgba(0,0,0,.3)}.menu-inner-list-block{display:flex;overflow:hidden;flex-wrap:wrap;height:380px;padding:10px 5px 10px 10px}.menu-inner-list-block:hover{overflow:auto}.menu-inner-list-block-no-match{display:flex;overflow:hidden;flex-wrap:wrap;height:380px;font-size:26px;color:#ccc}.menu-inner-list-block-no-match p{padding-top:100px;width:100%!important;text-align:center}.apps{padding:15px;overflow:auto;right:35px;width:600px;height:400px}.apps-hidden{display:none}.apps,.profile{position:absolute;background-color:#fff;border:1px solid #ececec;top:50px;z-index:1000;box-shadow:0 5px 10px rgba(0,0,0,.175)}.app-menu-btn{margin:5px;text-decoration:none;height:120px;width:120px;display:flex;justify-content:center;align-items:center;transition:all .2s ease-in-out;padding:5px}.app-menu-btn:hover{background-color:#f1f1f1;-webkit-transform:scale(1.01);transform:scale(1.01)}.app-menu-btn img{display:block;margin:auto;height:53px}.app-menu-name{margin-top:5px;font-size:13px;text-align:center;color:#222}.menu-inner-list-block::-webkit-scrollbar{width:10px}.menu-inner-list-block::-webkit-scrollbar-track{background-color:rgba(0,0,0,.02)}.menu-inner-list-block::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.1)}.menu-app-management-block{width:100%;height:50px;display:flex;align-items:center;justify-content:center;box-shadow:0 -1px 2px -1px rgba(0,0,0,.16)}.app-management-btn{transition:all .2s ease-in-out;display:flex;align-items:center;justify-content:center;font-size:13px;height:40px;width:97%;color:#222;text-decoration:none}.app-management-btn:hover{background-color:#eee;-webkit-transform:scale(1.01);transform:scale(1.01)}.menu-search-icon{display:flex;align-items:center;margin-right:7px}`],
                animations: [
                    trigger('slide', [
                        state('in', style({
                            opacity: 1
                        })),
                        transition('void => *', [
                            style({
                                transform: 'translateY(-100%)'
                            }),
                            animate(300)
                        ]),
                        transition('* => void', [
                            animate(300),
                            style({
                                transform: 'translateY(-100%)'
                            })
                        ])
                    ])
                ]
            },] },
];
/** @nocollapse */
MenuSearchComponent.ctorParameters = () => [
    { type: MenuService }
];
MenuSearchComponent.propDecorators = {
    rootUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuProfileComponent {
    /**
     * @param {?} menuService
     */
    constructor(menuService) {
        this.menuService = menuService;
        this.showProfile = false;
        this.rootUrl = this.contextPath = '../../../';
        this.loadingUser = true;
        this.profileMenus = PROFILE_MENUS;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menuService.getUserInfo(this.rootUrl).subscribe((profile) => {
            if (profile) {
                this.currentUser = {
                    name: profile.displayName,
                    email: profile.email,
                };
            }
            this.loadingUser = false;
        });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showMenuProfile(e) {
        e.stopPropagation();
        this.showProfile = true;
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    hideMenuProfile(e) {
        if (e) {
            e.stopPropagation();
        }
        this.showProfile = false;
    }
}
MenuProfileComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu-profile',
                template: `<div class="menu-profile-container" appClickOutside (clickOutside)="hideMenuProfile()">
    <div class="menu-profile-btn">
        <a class="menu-profile-icon" [style.background-color]="backgroundColor | convertToLighterColor" (mouseenter)="showMenuProfile($event)">
            {{currentUser?.name | abbreviate}}
        </a>
    </div>
    <div class="profile-menu-list-block" *ngIf="showProfile && !loadingUser" (mouseleave)="hideMenuProfile($event)">
        <div class="profile-menus-list">
            <a *ngFor="let profileMenu of profileMenus" [href]="rootUrl + profileMenu.defaultAction" class="profile-menu-btn">
                <div>
                    <img alt="" [src]="contextPath + profileMenu.icon">
                    <div class="profile-menu-name">{{profileMenu?.name}}</div>
                </div>
            </a>
        </div>
        <div class="user-profile-block">
            <div [style.background-color]="backgroundColor | convertToLighterColor" class="user-profile-logo" *ngIf="!loadingUser">{{currentUser?.name | abbreviate}}</div>
            <div class="user-profile-name">
                <span *ngIf="!loadingUser"><b>{{currentUser?.name}}</b></span>
            </div>
            <div><small *ngIf="!loadingUser">{{currentUser?.email}}</small></div>
            <div class="logout-btn-block">
                <a class="logout-btn" [href]="rootUrl + 'dhis-web-commons-security/logout.action'" *ngIf="!loadingUser">
            LOG OUT
          </a>
            </div>
        </div>
    </div>
</div>
`,
                styles: [`.menu-profile-icon{height:34px;width:34px;border-radius:17px;display:flex;justify-content:center;align-items:center;font-size:15px;cursor:pointer;text-decoration:none;color:#eee!important}.menu-profile-btn{margin-right:2rem;margin-top:5px}.profile-menu-list-block{position:absolute;top:42px;max-width:650px;width:100%;min-height:320px;right:10px;z-index:-1000;font-size:14px;text-align:left;list-style:none;background-color:#fff;display:flex;box-shadow:0 0 3px rgba(0,0,0,.3)}.profile-menus-list{width:70%;display:flex;flex-wrap:wrap;overflow:auto;padding:15px;height:300px}.user-profile-block{position:relative;text-align:center;width:30%;height:320px;padding-top:20px;background-color:#f5f5f5}.user-profile-logo{margin:auto;height:60px;width:60px;display:flex;justify-content:center;align-items:center;border-radius:30px;font-size:30px;color:#eee;font-weight:500}.user-profile-name{margin-top:10px}.logout-btn-block{position:absolute;bottom:20px;color:#555;padding:5px;width:100%}.logout-btn{display:block;text-decoration:none;text-align:center}.logout-btn:hover{color:#222}.profile-menu-btn{margin:5px;text-decoration:none;height:120px;width:120px;display:flex;justify-content:center;align-items:center;transition:all .2s ease-in-out;padding:5px}.profile-menu-btn:hover{background-color:#f1f1f1;-webkit-transform:scale(1.01);transform:scale(1.01)}.profile-menu-btn img{display:block;margin:auto;height:50px}.profile-menu-name{margin-top:5px;font-size:11px;text-align:center;color:#222}`]
            },] },
];
/** @nocollapse */
MenuProfileComponent.ctorParameters = () => [
    { type: MenuService }
];
MenuProfileComponent.propDecorators = {
    rootUrl: [{ type: Input }],
    contextPath: [{ type: Input }],
    backgroundColor: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuLoaderComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
MenuLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu-loader',
                template: `<div
  class="animated-background"
></div>
`,
                styles: [`@-webkit-keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}@keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}.animated-background{-webkit-animation-duration:1s;animation-duration:1s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-name:placeHolderShimmer;animation-name:placeHolderShimmer;-webkit-animation-timing-function:linear;animation-timing-function:linear;background:#f6f7f8;background:linear-gradient(to right,#eee 8%,#ddd 18%,#eee 33%);background-size:800px 104px;height:100%;position:relative}`]
            },] },
];
/** @nocollapse */
MenuLoaderComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuSideBarComponent {
    /**
     * @param {?} menuService
     */
    constructor(menuService) {
        this.menuService = menuService;
        this.showProfile = false;
        this.rootUrl = '../../../';
        this.loadingUser = true;
        this.apps = [];
        this.originalApps = [];
        this.loadingModules = true;
        this.profileMenus = PROFILE_MENUS;
        this.filteredApp = '';
        this.showSidebarApps = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menuService.getUserInfo(this.rootUrl).subscribe((profile) => {
            if (profile) {
                this.currentUser = {
                    name: profile.displayName,
                    email: profile.email
                };
            }
            this.loadingUser = false;
        });
        this.menuService
            .getMenuModules(this.rootUrl)
            .subscribe((menuModules) => {
            if (menuModules !== null) {
                this.loadingModules = false;
                this.originalApps = [...menuModules];
                this.apps = this._prepareMenuModules();
            }
        });
    }
    /**
     * @return {?}
     */
    _prepareMenuModules() {
        return this.filteredApp === ''
            ? this.originalApps.filter((menu) => {
                return !menu.onlyShowOnSearch;
            })
            : this.originalApps;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSidebarMenus(e) {
        e.stopPropagation();
        this.showSidebarApps = !this.showSidebarApps;
    }
    /**
     * @return {?}
     */
    updateMenuModules() {
        this.apps = this._prepareMenuModules();
    }
}
MenuSideBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu-side-bar',
                template: `<div class="sidebar-container">
  <div class="sidebar-user-profile-block">
    <div class="sidebar-user-profile-logo" *ngIf="!loadingUser">{{currentUser?.name | abbreviate}}</div>
    <div class="sidebar-user-profile-info">
      <h4 *ngIf="!loadingUser">{{currentUser?.name}}</h4>
      <h6 *ngIf="!loadingUser">{{currentUser?.email}}</h6>
    </div>
  </div>
  <ul class="sidebar-list-block">
    <li>
      <a (click)="toggleSidebarMenus($event)">Apps</a>
    </li>
    <li [ngClass]="{
          'sidebar-app-hidden': !showSidebarApps
        }">
      <input type="text" class="sidebar-app-input" placeholder="Search Apps" [(ngModel)]="filteredApp" (ngModelChange)="updateMenuModules()">
    </li>
    <li class="sidebar-app-list" [ngClass]="{
          'sidebar-app-hidden': !showSidebarApps
        }">
      <a *ngFor="let app of  apps | filterByName: filteredApp" [href]="app.defaultAction" class="sidebar-app-menu-btn">
        <div class="sidebar-app-menu-btn-content">
          <img alt="" [src]="app.icon" title="{{app.displayName}}">
          <div class="app-menu-name">{{app.displayName}}</div>
        </div>
      </a>
    </li>
    <li *ngFor="let profileMenu of profileMenus">
      <a [href]="rootUrl + profileMenu.defaultAction">
        <img alt="" [src]="profileMenu.icon"> {{profileMenu.name}}
      </a>
    </li>
    <li>
      <a [href]="rootUrl + 'dhis-web-commons-security/logout.action'">Log Out</a>
    </li>
  </ul>
</div>`,
                styles: [`.sidebar-user-profile-block{text-align:left;background-color:#eee;height:100px;padding:5px;display:flex}.sidebar-user-profile-logo{height:90px;display:flex;align-items:center;justify-content:center;font-size:40px;font-weight:500;color:#9e9e9e;width:90px;border-radius:45px;text-align:center;background-color:#ddd}.sidebar-user-profile-info{padding:15px}.sidebar-list-block{list-style-type:none;margin:0;padding:0;display:block}.sidebar-hidden{display:none!important}.sidebar-app-input{border-style:none;border-bottom:1px solid #eee;color:#000;width:100%;padding:7px}.sidebar-app-input:focus{outline:0}.sidebar-list-block li a{text-decoration:none;display:block;color:#000;border-bottom:1px solid #eee;padding:10px 15px}.sidebar-list-block li a img{height:20px}.sidebar-app-list{display:flex;overflow:auto;height:200px;flex-wrap:wrap}.sidebar-app-menu-btn{display:flex!important;align-items:center;justify-content:center;margin:5px;text-decoration:none;border-radius:5px;border:1px solid #ddd;transition:all .2s ease-in-out;width:85px;height:85px}.sidebar-app-menu-btn-content{text-align:center}.app-menu-name{margin-top:5px;font-size:12px}`]
            },] },
];
/** @nocollapse */
MenuSideBarComponent.ctorParameters = () => [
    { type: MenuService }
];
MenuSideBarComponent.propDecorators = {
    rootUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuNotificationService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    loadNotification(rootUrl) {
        return this.httpClient.get(`${rootUrl}api/me/dashboard.json`).pipe(catchError(() => of(null)));
    }
}
MenuNotificationService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
MenuNotificationService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ MenuNotificationService.ngInjectableDef = defineInjectable({ factory: function MenuNotificationService_Factory() { return new MenuNotificationService(inject(HttpClient)); }, token: MenuNotificationService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MenuNotificationComponent {
    /**
     * @param {?} menuNotificationService
     * @param {?} menuService
     */
    constructor(menuNotificationService, menuService) {
        this.menuNotificationService = menuNotificationService;
        this.menuService = menuService;
        this.notificationMenuLinks = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menuNotificationService.loadNotification(this.rootUrl).subscribe((notificationResults) => {
            this.menuNotification = notificationResults;
        });
        this.menuService.getSanitizedMenus().pipe(filter((result) => result.length > 0)).
            subscribe((sanitizedMenus) => {
            each(filter$1(sanitizedMenus, menuItem => menuItem.name.indexOf('interpretation') !== -1 || menuItem.name.indexOf('messaging') !== -1), menuItem => {
                if (menuItem.name.indexOf('interpretation') !== -1) {
                    this.notificationMenuLinks['interpretation'] = menuItem.defaultAction;
                }
                else if (menuItem.name.indexOf('messaging') !== -1) {
                    this.notificationMenuLinks['message'] = menuItem.defaultAction;
                }
            });
        });
    }
}
MenuNotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu-notification',
                template: `<div class="menu-notification" *ngIf="menuNotification">
  <a class="menu-chat-notification"
     *ngIf="notificationMenuLinks.interpretation"
     [href]="notificationMenuLinks.interpretation"
     title="You have {{ menuNotification.unreadInterpretations }} unread interpretations"
  >
    <div *ngIf="menuNotification.unreadInterpretations > 0" class="menu-notification-badge">
      {{menuNotification.unreadInterpretations}}
    </div>
    <svg class="" viewBox="0 0 24 24"
         style="display: inline-block; color: rgba(0, 0, 0, 0.87); fill: white; height: 24px; width: 24px; user-select: none; transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;">
      <path
        d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path>
    </svg>
  </a>
  <a class="menu-message-conversation-notification"
     *ngIf="notificationMenuLinks.message"
     [href]="notificationMenuLinks.message"
     title="You have {{ menuNotification.unreadMessageConversations }} unread message conversations"
  >
    <div *ngIf="menuNotification.unreadMessageConversations > 0" class="menu-notification-badge">
      {{menuNotification.unreadMessageConversations}}
    </div>
    <svg class="" viewBox="0 0 24 24"
         style="display: inline-block; color: rgba(0, 0, 0, 0.87); fill: white; height: 24px; width: 24px; user-select: none; transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;">
      <path
        d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path>
    </svg>
  </a>
</div>
`,
                styles: [`.menu-notification{display:flex;align-items:center;justify-content:space-around}.menu-chat-notification{padding-top:5px;margin-right:10px}.menu-message-conversation-notification{padding-top:4px;margin-left:10px}.menu-chat-notification,.menu-message-conversation-notification{position:relative}.menu-notification-badge{display:flex;flex-flow:row wrap;place-content:center;align-items:center;position:absolute;top:-4px;right:-6px;font-weight:500;font-size:9px;width:20px;height:20px;border-radius:50%;background-color:#4ca899;color:#fff;z-index:10}`]
            },] },
];
/** @nocollapse */
MenuNotificationComponent.ctorParameters = () => [
    { type: MenuNotificationService },
    { type: MenuService }
];
MenuNotificationComponent.propDecorators = {
    rootUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ components = [
    MenuLoaderComponent,
    MenuProfileComponent,
    MenuSearchComponent,
    LoginFormComponent,
    MenuSideBarComponent,
    MenuNotificationComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ClickOutsideDirective {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.clickOutside = new EventEmitter();
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    onClick(targetElement) {
        const /** @type {?} */ clickedInside = this._elementRef.nativeElement.contains(targetElement);
        if (!clickedInside) {
            this.clickOutside.emit(true);
        }
    }
}
ClickOutsideDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appClickOutside]'
            },] },
];
/** @nocollapse */
ClickOutsideDirective.ctorParameters = () => [
    { type: ElementRef }
];
ClickOutsideDirective.propDecorators = {
    clickOutside: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ directives = [ClickOutsideDirective];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FilterByNamePipe {
    /**
     * @param {?} list
     * @param {?} name
     * @return {?}
     */
    transform(list, name) {
        const /** @type {?} */ splitedName = name ? name.split(/[\.\-_]/) : [];
        return splitedName.length > 0
            ? list.filter((item) => splitedName.some((nameString) => item.displayName.toLowerCase().indexOf(nameString.toLowerCase()) !== -1))
            : list;
    }
}
FilterByNamePipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterByName'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AbbreviatePipe {
    /**
     * @param {?} name
     * @param {?=} args
     * @return {?}
     */
    transform(name, args) {
        const /** @type {?} */ abbreviatedName = [];
        let /** @type {?} */ count = 0;
        if (name) {
            for (let /** @type {?} */ i = 0; i <= name.length - 1; i++) {
                if (i === 0) {
                    abbreviatedName.push(name[i].toUpperCase());
                }
                else {
                    if (name[i] === ' ') {
                        count = i;
                        abbreviatedName.push(name[count + 1].toUpperCase());
                    }
                }
            }
        }
        return abbreviatedName.join('');
    }
}
AbbreviatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'abbreviate'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ConvertToLighterColor {
    /**
     * @param {?} hexColor
     * @return {?}
     */
    transform(hexColor) {
        const /** @type {?} */ hex = hexColor.replace('#', '');
        const /** @type {?} */ r = parseInt(hex.substring(0, 2), 16) + 30;
        const /** @type {?} */ g = parseInt(hex.substring(2, 4), 16) + 30;
        const /** @type {?} */ b = parseInt(hex.substring(4, 6), 16) + 30;
        return 'rgb(' + r + ',' + g + ',' + b + ')';
    }
}
ConvertToLighterColor.decorators = [
    { type: Pipe, args: [{
                name: 'convertToLighterColor'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ pipes = [FilterByNamePipe, AbbreviatePipe, ConvertToLighterColor];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxDhis2MenuModule {
}
NgxDhis2MenuModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, HttpClientModule],
                declarations: [...containers, ...components, ...directives, ...pipes],
                exports: [...containers]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxDhis2MenuModule, components as ɵe, LoginFormComponent as ɵi, MenuLoaderComponent as ɵf, MenuNotificationComponent as ɵk, MenuProfileComponent as ɵg, MenuSearchComponent as ɵh, MenuSideBarComponent as ɵj, containers as ɵa, MenuComponent as ɵb, ClickOutsideDirective as ɵn, directives as ɵm, AbbreviatePipe as ɵq, ConvertToLighterColor as ɵr, FilterByNamePipe as ɵp, pipes as ɵo, MenuNotificationService as ɵl, MenuService as ɵc, SystemStateService as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,