/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import * as fromConstants from '../constants';
import { BehaviorSubject, Observable, forkJoin } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class MenuService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._menuModules$ = new BehaviorSubject([]);
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    getSystemSettings(rootUrl) {
        return Observable.create(observer => {
            forkJoin(this.httpClient.get(rootUrl + 'api/systemSettings.json'), this.httpClient.get(rootUrl + 'api/system/info.json')).subscribe((settings) => {
                observer.next(Object.assign({}, settings[0], settings[1]));
                observer.complete();
            }, () => observer.error(null));
        });
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    getMenuModules(rootUrl) {
        return Observable.create(observer => {
            this.httpClient.get(rootUrl + 'dhis-web-commons/menu/getModules.action').subscribe((menuModuleResult) => {
                const /** @type {?} */ sanitizedMenu = this._sanitizeMenuItems(menuModuleResult.modules, rootUrl);
                this._menuModules$.next(sanitizedMenu);
                observer.next(sanitizedMenu);
                observer.complete();
            }, () => {
                observer.next(null);
                observer.complete();
            });
        });
    }
    /**
     * @return {?}
     */
    getSanitizedMenus() {
        return this._menuModules$.asObservable();
    }
    /**
     * @param {?} rootUrl
     * @return {?}
     */
    getUserInfo(rootUrl) {
        return Observable.create(observer => {
            this.httpClient.get(rootUrl + 'api/me.json').subscribe((userInfo) => {
                observer.next(userInfo);
                observer.complete();
            }, () => {
                observer.next(null);
                observer.complete();
            });
        });
    }
    /**
     * @param {?} menuItems
     * @param {?} rootUrl
     * @return {?}
     */
    _sanitizeMenuItems(menuItems, rootUrl) {
        const /** @type {?} */ sanitizedMenuItems = menuItems.map((item) => {
            const /** @type {?} */ newItem = Object.assign({}, item);
            if (!newItem.hasOwnProperty('displayName') ||
                newItem.displayName === '') {
                newItem.displayName = newItem.name;
            }
            if (newItem.defaultAction.indexOf('http') === -1) {
                newItem.defaultAction = '../../' + newItem.defaultAction;
            }
            if (newItem.icon.indexOf('http') === -1) {
                newItem.icon = '../../' + newItem.icon;
            }
            newItem.onlyShowOnSearch = false;
            return newItem;
        });
        const /** @type {?} */ predefinedMenuItems = fromConstants.PREDEFINED_MENU_ITEMS.map((item) => {
            const /** @type {?} */ newItem = Object.assign({}, item);
            if (newItem.defaultAction) {
                newItem.defaultAction = rootUrl + newItem.defaultAction;
            }
            if (newItem.icon) {
                newItem.icon = rootUrl + newItem.icon;
            }
            return newItem;
        });
        return [...sanitizedMenuItems, ...predefinedMenuItems];
    }
}
MenuService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
MenuService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ MenuService.ngInjectableDef = i0.defineInjectable({ factory: function MenuService_Factory() { return new MenuService(i0.inject(i1.HttpClient)); }, token: MenuService, providedIn: "root" });
function MenuService_tsickle_Closure_declarations() {
    /** @type {?} */
    MenuService.prototype._menuModules$;
    /** @type {?} */
    MenuService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,