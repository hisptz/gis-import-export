/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { switchMap, tap } from 'rxjs/operators';
import { BehaviorSubject, of, timer } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SystemStateService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._loggingStatus$ = new BehaviorSubject(true);
    }
    /**
     * @return {?}
     */
    checkOnlineStatus() {
        return timer(1000, 30000).pipe(switchMap(() => of(navigator.onLine)), tap((onlineStatus) => {
            this._checkLoginStatus(onlineStatus);
        }));
    }
    /**
     * @param {?} isOnline
     * @return {?}
     */
    _checkLoginStatus(isOnline) {
        if (isOnline) {
            this.pingServer().subscribe((pingResult) => {
                this._loggingStatus$.next(pingResult.loggedIn);
            }, (error) => {
                if (isOnline) {
                    this._loggingStatus$.next(false);
                }
            });
        }
        else {
            this._loggingStatus$.next(true);
        }
    }
    /**
     * @return {?}
     */
    getLoginStatus() {
        return this._loggingStatus$.asObservable();
    }
    /**
     * @return {?}
     */
    pingServer() {
        return this.httpClient.get('../../../dhis-web-commons-stream/ping.action');
    }
}
SystemStateService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
SystemStateService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ SystemStateService.ngInjectableDef = i0.defineInjectable({ factory: function SystemStateService_Factory() { return new SystemStateService(i0.inject(i1.HttpClient)); }, token: SystemStateService, providedIn: "root" });
function SystemStateService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemStateService.prototype._loggingStatus$;
    /** @type {?} */
    SystemStateService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGlzcHR6L25neC1kaGlzMi1tZW51LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N5c3RlbS1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFjLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBRzlELE1BQU07Ozs7SUFHSixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZOytCQUZVLElBQUksZUFBZSxDQUFVLElBQUksQ0FBQztLQUdyRjs7OztJQUVELGlCQUFpQjtRQUNmLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3pGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0QyxDQUFDLENBQUMsQ0FBQztLQUNMOzs7OztJQUVPLGlCQUFpQixDQUFDLFFBQWlCO1FBRXpDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFYixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBZSxFQUFFLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNoRCxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ1gsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDYixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbEM7YUFDRixDQUFDLENBQUM7U0FDSjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7Ozs7O0lBR0gsY0FBYztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0tBQzVDOzs7O0lBRUQsVUFBVTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0tBQzVFOzs7WUFuQ0YsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztZQUx2QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBvZiwgT2JzZXJ2YWJsZSwgdGltZXIgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgU3lzdGVtU3RhdGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfbG9nZ2luZ1N0YXR1cyQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gIH1cblxuICBjaGVja09ubGluZVN0YXR1cygpIHtcbiAgICByZXR1cm4gdGltZXIoMTAwMCwgMzAwMDApLnBpcGUoc3dpdGNoTWFwKCgpID0+IG9mKG5hdmlnYXRvci5vbkxpbmUpKSwgdGFwKChvbmxpbmVTdGF0dXMpID0+IHtcbiAgICAgIHRoaXMuX2NoZWNrTG9naW5TdGF0dXMob25saW5lU3RhdHVzKTtcbiAgICB9KSk7XG4gIH1cblxuICBwcml2YXRlIF9jaGVja0xvZ2luU3RhdHVzKGlzT25saW5lOiBib29sZWFuKSB7XG5cbiAgICBpZiAoaXNPbmxpbmUpIHtcblxuICAgICAgdGhpcy5waW5nU2VydmVyKCkuc3Vic2NyaWJlKChwaW5nUmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5fbG9nZ2luZ1N0YXR1cyQubmV4dChwaW5nUmVzdWx0LmxvZ2dlZEluKTtcbiAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoaXNPbmxpbmUpIHtcbiAgICAgICAgICB0aGlzLl9sb2dnaW5nU3RhdHVzJC5uZXh0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xvZ2dpbmdTdGF0dXMkLm5leHQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0TG9naW5TdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvZ2dpbmdTdGF0dXMkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcGluZ1NlcnZlcigpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KCcuLi8uLi8uLi9kaGlzLXdlYi1jb21tb25zLXN0cmVhbS9waW5nLmFjdGlvbicpO1xuICB9XG59XG4iXX0=