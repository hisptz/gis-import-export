/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Component } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
export class LoginFormComponent {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.credentials = {
            username: undefined,
            password: undefined
        };
        this.loginError = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSubmit(e) {
        e.stopPropagation();
        this.loggingIn = true;
        this.loginError = '';
        const /** @type {?} */ headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
        this.httpClient.post('../../../dhis-web-commons-security/login.action', 'j_username=' +
            this.credentials.username +
            '&j_password=' +
            this.credentials.password, {
            headers
        }).pipe(catchError(this._handleError)).subscribe(() => {
            this.loggingIn = false;
        }, (error) => {
            this.loggingIn = false;
            if (error.status === 200 && error.url.indexOf('login') !== -1) {
                this.loginError = 'Incorrect username or password';
            }
        });
    }
    /**
     * @param {?} err
     * @return {?}
     */
    _handleError(err) {
        let /** @type {?} */ error = null;
        if (err.error instanceof Error) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object ? err.error.message : err.error ? err.error : err.message,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        return throwError(error);
    }
}
LoginFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-login-form',
                template: `<form action="" class="login-form" #loginForm="ngForm">
  <input class="login-form-input" type="text" required [(ngModel)]="credentials.username" name="username" #username="ngModel"
    placeholder="Enter username" autofocus tabindex="0">
  <input class="login-form-input" type="password" required [(ngModel)]="credentials.password" name="password" #password="ngModel"
    placeholder="Enter password" autofocus tabindex="1">
  <button class="login-form-button" type="submit" [disabled]="(!password.valid && !username.valid) || loggingIn" (click)="onSubmit($event)"
    tabindex="2">
    {{loggingIn ? 'Logging in ...' : 'Login'}}
  </button>
</form>
<div *ngIf="loginError !== ''" class="login-error-block">{{loginError}}</div>`,
                styles: [`.login-form{display:flex;padding:3px!important;width:100%}.login-form-input{padding-left:7px;display:flex;align-items:center;justify-content:flex-start;margin-right:3px;height:37px;outline:0;border-radius:2px;border:thin solid #ececec}.login-form-button{height:37px;background-color:#fff;border:thin solid #ececec;border-radius:2px;cursor:pointer}.login-error-block{font-size:14px;color:red;padding:5px}@media (max-width:500px){.login-form{display:block}.login-form input{width:100%;margin-bottom:3px;margin-right:0}.login-form button{width:100%;text-align:center}}`]
            },] },
];
/** @nocollapse */
LoginFormComponent.ctorParameters = () => [
    { type: HttpClient }
];
function LoginFormComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    LoginFormComponent.prototype.credentials;
    /** @type {?} */
    LoginFormComponent.prototype.loginError;
    /** @type {?} */
    LoginFormComponent.prototype.loggingIn;
    /** @type {?} */
    LoginFormComponent.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGlzcHR6L25neC1kaGlzMi1tZW51LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbG9naW4tZm9ybS9sb2dpbi1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBRVosTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBaUI1QyxNQUFNOzs7O0lBS0osWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHO1lBQ2pCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztLQUN0Qjs7OztJQUVELFFBQVE7S0FDUDs7Ozs7SUFFRCxRQUFRLENBQUMsQ0FBQztRQUNSLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUVyQix1QkFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQ25DLGNBQWMsRUFDZCxtQ0FBbUMsQ0FDcEMsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNsQixpREFBaUQsRUFDakQsYUFBYTtZQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUTtZQUN6QixjQUFjO1lBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQ3pCO1lBQ0UsT0FBTztTQUNSLENBQ0YsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDN0MsR0FBRyxFQUFFO1lBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDeEIsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5RCxJQUFJLENBQUMsVUFBVSxHQUFHLGdDQUFnQyxDQUFDO2FBQ3BEO1NBQ0YsQ0FDRixDQUFDO0tBQ0g7Ozs7O0lBRU8sWUFBWSxDQUFDLEdBQXNCO1FBQ3pDLHFCQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDOztZQUUvQixLQUFLLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLO2dCQUNsQixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07Z0JBQ2xCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVTtnQkFDMUIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHO2FBQ2IsQ0FBQztTQUNIO1FBQUMsSUFBSSxDQUFDLENBQUM7OztZQUdOLEtBQUssR0FBRztnQkFDTixPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTztnQkFDOUYsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO2dCQUNsQixVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVU7Z0JBQzFCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRzthQUNiLENBQUM7U0FDSDtRQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7WUFuRjVCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7OEVBVWtFO2dCQUM1RSxNQUFNLEVBQUUsQ0FBQyx1akJBQXVqQixDQUFDO2FBQ2xrQjs7OztZQXRCQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSHR0cENsaWVudCxcbiAgSHR0cEhlYWRlcnMsXG4gIEh0dHBFcnJvclJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtbG9naW4tZm9ybScsXG4gIHRlbXBsYXRlOiBgPGZvcm0gYWN0aW9uPVwiXCIgY2xhc3M9XCJsb2dpbi1mb3JtXCIgI2xvZ2luRm9ybT1cIm5nRm9ybVwiPlxuICA8aW5wdXQgY2xhc3M9XCJsb2dpbi1mb3JtLWlucHV0XCIgdHlwZT1cInRleHRcIiByZXF1aXJlZCBbKG5nTW9kZWwpXT1cImNyZWRlbnRpYWxzLnVzZXJuYW1lXCIgbmFtZT1cInVzZXJuYW1lXCIgI3VzZXJuYW1lPVwibmdNb2RlbFwiXG4gICAgcGxhY2Vob2xkZXI9XCJFbnRlciB1c2VybmFtZVwiIGF1dG9mb2N1cyB0YWJpbmRleD1cIjBcIj5cbiAgPGlucHV0IGNsYXNzPVwibG9naW4tZm9ybS1pbnB1dFwiIHR5cGU9XCJwYXNzd29yZFwiIHJlcXVpcmVkIFsobmdNb2RlbCldPVwiY3JlZGVudGlhbHMucGFzc3dvcmRcIiBuYW1lPVwicGFzc3dvcmRcIiAjcGFzc3dvcmQ9XCJuZ01vZGVsXCJcbiAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHBhc3N3b3JkXCIgYXV0b2ZvY3VzIHRhYmluZGV4PVwiMVwiPlxuICA8YnV0dG9uIGNsYXNzPVwibG9naW4tZm9ybS1idXR0b25cIiB0eXBlPVwic3VibWl0XCIgW2Rpc2FibGVkXT1cIighcGFzc3dvcmQudmFsaWQgJiYgIXVzZXJuYW1lLnZhbGlkKSB8fCBsb2dnaW5nSW5cIiAoY2xpY2spPVwib25TdWJtaXQoJGV2ZW50KVwiXG4gICAgdGFiaW5kZXg9XCIyXCI+XG4gICAge3tsb2dnaW5nSW4gPyAnTG9nZ2luZyBpbiAuLi4nIDogJ0xvZ2luJ319XG4gIDwvYnV0dG9uPlxuPC9mb3JtPlxuPGRpdiAqbmdJZj1cImxvZ2luRXJyb3IgIT09ICcnXCIgY2xhc3M9XCJsb2dpbi1lcnJvci1ibG9ja1wiPnt7bG9naW5FcnJvcn19PC9kaXY+YCxcbiAgc3R5bGVzOiBbYC5sb2dpbi1mb3Jte2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjNweCFpbXBvcnRhbnQ7d2lkdGg6MTAwJX0ubG9naW4tZm9ybS1pbnB1dHtwYWRkaW5nLWxlZnQ6N3B4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7bWFyZ2luLXJpZ2h0OjNweDtoZWlnaHQ6MzdweDtvdXRsaW5lOjA7Ym9yZGVyLXJhZGl1czoycHg7Ym9yZGVyOnRoaW4gc29saWQgI2VjZWNlY30ubG9naW4tZm9ybS1idXR0b257aGVpZ2h0OjM3cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjp0aGluIHNvbGlkICNlY2VjZWM7Ym9yZGVyLXJhZGl1czoycHg7Y3Vyc29yOnBvaW50ZXJ9LmxvZ2luLWVycm9yLWJsb2Nre2ZvbnQtc2l6ZToxNHB4O2NvbG9yOnJlZDtwYWRkaW5nOjVweH1AbWVkaWEgKG1heC13aWR0aDo1MDBweCl7LmxvZ2luLWZvcm17ZGlzcGxheTpibG9ja30ubG9naW4tZm9ybSBpbnB1dHt3aWR0aDoxMDAlO21hcmdpbi1ib3R0b206M3B4O21hcmdpbi1yaWdodDowfS5sb2dpbi1mb3JtIGJ1dHRvbnt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfX1gXVxufSlcbmV4cG9ydCBjbGFzcyBMb2dpbkZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBjcmVkZW50aWFsczogYW55O1xuICBsb2dpbkVycm9yOiBzdHJpbmc7XG4gIGxvZ2dpbmdJbjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0ge1xuICAgICAgdXNlcm5hbWU6IHVuZGVmaW5lZCxcbiAgICAgIHBhc3N3b3JkOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHRoaXMubG9naW5FcnJvciA9ICcnO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBvblN1Ym1pdChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmxvZ2dpbmdJbiA9IHRydWU7XG4gICAgdGhpcy5sb2dpbkVycm9yID0gJyc7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuc2V0KFxuICAgICAgJ0NvbnRlbnQtVHlwZScsXG4gICAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICk7XG4gICAgdGhpcy5odHRwQ2xpZW50LnBvc3QoXG4gICAgICAnLi4vLi4vLi4vZGhpcy13ZWItY29tbW9ucy1zZWN1cml0eS9sb2dpbi5hY3Rpb24nLFxuICAgICAgJ2pfdXNlcm5hbWU9JyArXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzLnVzZXJuYW1lICtcbiAgICAgICcmal9wYXNzd29yZD0nICtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMucGFzc3dvcmQsXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnNcbiAgICAgIH1cbiAgICApLnBpcGUoY2F0Y2hFcnJvcih0aGlzLl9oYW5kbGVFcnJvcikpLnN1YnNjcmliZShcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnaW5nSW4gPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnaW5nSW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gMjAwICYmIGVycm9yLnVybC5pbmRleE9mKCdsb2dpbicpICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMubG9naW5FcnJvciA9ICdJbmNvcnJlY3QgdXNlcm5hbWUgb3IgcGFzc3dvcmQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX2hhbmRsZUVycm9yKGVycjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICBsZXQgZXJyb3IgPSBudWxsO1xuICAgIGlmIChlcnIuZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gQSBjbGllbnQtc2lkZSBvciBuZXR3b3JrIGVycm9yIG9jY3VycmVkLiBIYW5kbGUgaXQgYWNjb3JkaW5nbHkuXG4gICAgICBlcnJvciA9IHtcbiAgICAgICAgbWVzc2FnZTogZXJyLmVycm9yLFxuICAgICAgICBzdGF0dXM6IGVyci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IGVyci5zdGF0dXNUZXh0LFxuICAgICAgICB1cmw6IGVyci51cmxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBiYWNrZW5kIHJldHVybmVkIGFuIHVuc3VjY2Vzc2Z1bCByZXNwb25zZSBjb2RlLlxuICAgICAgLy8gVGhlIHJlc3BvbnNlIGJvZHkgbWF5IGNvbnRhaW4gY2x1ZXMgYXMgdG8gd2hhdCB3ZW50IHdyb25nLFxuICAgICAgZXJyb3IgPSB7XG4gICAgICAgIG1lc3NhZ2U6IGVyci5lcnJvciBpbnN0YW5jZW9mIE9iamVjdCA/IGVyci5lcnJvci5tZXNzYWdlIDogZXJyLmVycm9yID8gZXJyLmVycm9yIDogZXJyLm1lc3NhZ2UsXG4gICAgICAgIHN0YXR1czogZXJyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogZXJyLnN0YXR1c1RleHQsXG4gICAgICAgIHVybDogZXJyLnVybFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gIH1cbn1cbiJdfQ==