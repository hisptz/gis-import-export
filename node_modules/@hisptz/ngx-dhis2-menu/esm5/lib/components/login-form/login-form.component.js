/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Component } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
var LoginFormComponent = /** @class */ (function () {
    function LoginFormComponent(httpClient) {
        this.httpClient = httpClient;
        this.credentials = {
            username: undefined,
            password: undefined
        };
        this.loginError = '';
    }
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} e
     * @return {?}
     */
    LoginFormComponent.prototype.onSubmit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        e.stopPropagation();
        this.loggingIn = true;
        this.loginError = '';
        var /** @type {?} */ headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');
        this.httpClient.post('../../../dhis-web-commons-security/login.action', 'j_username=' +
            this.credentials.username +
            '&j_password=' +
            this.credentials.password, {
            headers: headers
        }).pipe(catchError(this._handleError)).subscribe(function () {
            _this.loggingIn = false;
        }, function (error) {
            _this.loggingIn = false;
            if (error.status === 200 && error.url.indexOf('login') !== -1) {
                _this.loginError = 'Incorrect username or password';
            }
        });
    };
    /**
     * @param {?} err
     * @return {?}
     */
    LoginFormComponent.prototype._handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        var /** @type {?} */ error = null;
        if (err.error instanceof Error) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object ? err.error.message : err.error ? err.error : err.message,
                status: err.status,
                statusText: err.statusText,
                url: err.url
            };
        }
        return throwError(error);
    };
    LoginFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-login-form',
                    template: "<form action=\"\" class=\"login-form\" #loginForm=\"ngForm\">\n  <input class=\"login-form-input\" type=\"text\" required [(ngModel)]=\"credentials.username\" name=\"username\" #username=\"ngModel\"\n    placeholder=\"Enter username\" autofocus tabindex=\"0\">\n  <input class=\"login-form-input\" type=\"password\" required [(ngModel)]=\"credentials.password\" name=\"password\" #password=\"ngModel\"\n    placeholder=\"Enter password\" autofocus tabindex=\"1\">\n  <button class=\"login-form-button\" type=\"submit\" [disabled]=\"(!password.valid && !username.valid) || loggingIn\" (click)=\"onSubmit($event)\"\n    tabindex=\"2\">\n    {{loggingIn ? 'Logging in ...' : 'Login'}}\n  </button>\n</form>\n<div *ngIf=\"loginError !== ''\" class=\"login-error-block\">{{loginError}}</div>",
                    styles: [".login-form{display:flex;padding:3px!important;width:100%}.login-form-input{padding-left:7px;display:flex;align-items:center;justify-content:flex-start;margin-right:3px;height:37px;outline:0;border-radius:2px;border:thin solid #ececec}.login-form-button{height:37px;background-color:#fff;border:thin solid #ececec;border-radius:2px;cursor:pointer}.login-error-block{font-size:14px;color:red;padding:5px}@media (max-width:500px){.login-form{display:block}.login-form input{width:100%;margin-bottom:3px;margin-right:0}.login-form button{width:100%;text-align:center}}"]
                },] },
    ];
    /** @nocollapse */
    LoginFormComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return LoginFormComponent;
}());
export { LoginFormComponent };
function LoginFormComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    LoginFormComponent.prototype.credentials;
    /** @type {?} */
    LoginFormComponent.prototype.loginError;
    /** @type {?} */
    LoginFormComponent.prototype.loggingIn;
    /** @type {?} */
    LoginFormComponent.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGlzcHR6L25neC1kaGlzMi1tZW51LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbG9naW4tZm9ybS9sb2dpbi1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBRVosTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztJQXNCMUMsNEJBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDeEMsSUFBSSxDQUFDLFdBQVcsR0FBRztZQUNqQixRQUFRLEVBQUUsU0FBUztZQUNuQixRQUFRLEVBQUUsU0FBUztTQUNwQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7S0FDdEI7Ozs7SUFFRCxxQ0FBUTs7O0lBQVI7S0FDQzs7Ozs7SUFFRCxxQ0FBUTs7OztJQUFSLFVBQVMsQ0FBQztRQUFWLGlCQTZCQztRQTVCQyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFckIscUJBQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsR0FBRyxDQUNuQyxjQUFjLEVBQ2QsbUNBQW1DLENBQ3BDLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDbEIsaURBQWlELEVBQ2pELGFBQWE7WUFDYixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVE7WUFDekIsY0FBYztZQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUN6QjtZQUNFLE9BQU8sU0FBQTtTQUNSLENBQ0YsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDN0M7WUFDRSxLQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUN4QixFQUNELFVBQUMsS0FBSztZQUNKLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxnQ0FBZ0MsQ0FBQzthQUNwRDtTQUNGLENBQ0YsQ0FBQztLQUNIOzs7OztJQUVPLHlDQUFZOzs7O2NBQUMsR0FBc0I7UUFDekMscUJBQUksS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUM7O1lBRS9CLEtBQUssR0FBRztnQkFDTixPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUs7Z0JBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTtnQkFDbEIsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVO2dCQUMxQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7YUFDYixDQUFDO1NBQ0g7UUFBQyxJQUFJLENBQUMsQ0FBQzs7O1lBR04sS0FBSyxHQUFHO2dCQUNOLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FBSyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPO2dCQUM5RixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07Z0JBQ2xCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVTtnQkFDMUIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHO2FBQ2IsQ0FBQztTQUNIO1FBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O2dCQW5GNUIsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxveEJBVWtFO29CQUM1RSxNQUFNLEVBQUUsQ0FBQyx1akJBQXVqQixDQUFDO2lCQUNsa0I7Ozs7Z0JBdEJDLFVBQVU7OzZCQURaOztTQXdCYSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBIdHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgSHR0cEVycm9yUmVzcG9uc2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1sb2dpbi1mb3JtJyxcbiAgdGVtcGxhdGU6IGA8Zm9ybSBhY3Rpb249XCJcIiBjbGFzcz1cImxvZ2luLWZvcm1cIiAjbG9naW5Gb3JtPVwibmdGb3JtXCI+XG4gIDxpbnB1dCBjbGFzcz1cImxvZ2luLWZvcm0taW5wdXRcIiB0eXBlPVwidGV4dFwiIHJlcXVpcmVkIFsobmdNb2RlbCldPVwiY3JlZGVudGlhbHMudXNlcm5hbWVcIiBuYW1lPVwidXNlcm5hbWVcIiAjdXNlcm5hbWU9XCJuZ01vZGVsXCJcbiAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHVzZXJuYW1lXCIgYXV0b2ZvY3VzIHRhYmluZGV4PVwiMFwiPlxuICA8aW5wdXQgY2xhc3M9XCJsb2dpbi1mb3JtLWlucHV0XCIgdHlwZT1cInBhc3N3b3JkXCIgcmVxdWlyZWQgWyhuZ01vZGVsKV09XCJjcmVkZW50aWFscy5wYXNzd29yZFwiIG5hbWU9XCJwYXNzd29yZFwiICNwYXNzd29yZD1cIm5nTW9kZWxcIlxuICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgcGFzc3dvcmRcIiBhdXRvZm9jdXMgdGFiaW5kZXg9XCIxXCI+XG4gIDxidXR0b24gY2xhc3M9XCJsb2dpbi1mb3JtLWJ1dHRvblwiIHR5cGU9XCJzdWJtaXRcIiBbZGlzYWJsZWRdPVwiKCFwYXNzd29yZC52YWxpZCAmJiAhdXNlcm5hbWUudmFsaWQpIHx8IGxvZ2dpbmdJblwiIChjbGljayk9XCJvblN1Ym1pdCgkZXZlbnQpXCJcbiAgICB0YWJpbmRleD1cIjJcIj5cbiAgICB7e2xvZ2dpbmdJbiA/ICdMb2dnaW5nIGluIC4uLicgOiAnTG9naW4nfX1cbiAgPC9idXR0b24+XG48L2Zvcm0+XG48ZGl2ICpuZ0lmPVwibG9naW5FcnJvciAhPT0gJydcIiBjbGFzcz1cImxvZ2luLWVycm9yLWJsb2NrXCI+e3tsb2dpbkVycm9yfX08L2Rpdj5gLFxuICBzdHlsZXM6IFtgLmxvZ2luLWZvcm17ZGlzcGxheTpmbGV4O3BhZGRpbmc6M3B4IWltcG9ydGFudDt3aWR0aDoxMDAlfS5sb2dpbi1mb3JtLWlucHV0e3BhZGRpbmctbGVmdDo3cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDttYXJnaW4tcmlnaHQ6M3B4O2hlaWdodDozN3B4O291dGxpbmU6MDtib3JkZXItcmFkaXVzOjJweDtib3JkZXI6dGhpbiBzb2xpZCAjZWNlY2VjfS5sb2dpbi1mb3JtLWJ1dHRvbntoZWlnaHQ6MzdweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOnRoaW4gc29saWQgI2VjZWNlYztib3JkZXItcmFkaXVzOjJweDtjdXJzb3I6cG9pbnRlcn0ubG9naW4tZXJyb3ItYmxvY2t7Zm9udC1zaXplOjE0cHg7Y29sb3I6cmVkO3BhZGRpbmc6NXB4fUBtZWRpYSAobWF4LXdpZHRoOjUwMHB4KXsubG9naW4tZm9ybXtkaXNwbGF5OmJsb2NrfS5sb2dpbi1mb3JtIGlucHV0e3dpZHRoOjEwMCU7bWFyZ2luLWJvdHRvbTozcHg7bWFyZ2luLXJpZ2h0OjB9LmxvZ2luLWZvcm0gYnV0dG9ue3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpjZW50ZXJ9fWBdXG59KVxuZXhwb3J0IGNsYXNzIExvZ2luRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNyZWRlbnRpYWxzOiBhbnk7XG4gIGxvZ2luRXJyb3I6IHN0cmluZztcbiAgbG9nZ2luZ0luOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSB7XG4gICAgICB1c2VybmFtZTogdW5kZWZpbmVkLFxuICAgICAgcGFzc3dvcmQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgdGhpcy5sb2dpbkVycm9yID0gJyc7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG9uU3VibWl0KGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMubG9nZ2luZ0luID0gdHJ1ZTtcbiAgICB0aGlzLmxvZ2luRXJyb3IgPSAnJztcblxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5zZXQoXG4gICAgICAnQ29udGVudC1UeXBlJyxcbiAgICAgICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgKTtcbiAgICB0aGlzLmh0dHBDbGllbnQucG9zdChcbiAgICAgICcuLi8uLi8uLi9kaGlzLXdlYi1jb21tb25zLXNlY3VyaXR5L2xvZ2luLmFjdGlvbicsXG4gICAgICAnal91c2VybmFtZT0nICtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMudXNlcm5hbWUgK1xuICAgICAgJyZqX3Bhc3N3b3JkPScgK1xuICAgICAgdGhpcy5jcmVkZW50aWFscy5wYXNzd29yZCxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyc1xuICAgICAgfVxuICAgICkucGlwZShjYXRjaEVycm9yKHRoaXMuX2hhbmRsZUVycm9yKSkuc3Vic2NyaWJlKFxuICAgICAgKCkgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dpbmdJbiA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICB0aGlzLmxvZ2dpbmdJbiA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSAyMDAgJiYgZXJyb3IudXJsLmluZGV4T2YoJ2xvZ2luJykgIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5sb2dpbkVycm9yID0gJ0luY29ycmVjdCB1c2VybmFtZSBvciBwYXNzd29yZCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBfaGFuZGxlRXJyb3IoZXJyOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgaWYgKGVyci5lcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBBIGNsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQuIEhhbmRsZSBpdCBhY2NvcmRpbmdseS5cbiAgICAgIGVycm9yID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnIuZXJyb3IsXG4gICAgICAgIHN0YXR1czogZXJyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogZXJyLnN0YXR1c1RleHQsXG4gICAgICAgIHVybDogZXJyLnVybFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIGJhY2tlbmQgcmV0dXJuZWQgYW4gdW5zdWNjZXNzZnVsIHJlc3BvbnNlIGNvZGUuXG4gICAgICAvLyBUaGUgcmVzcG9uc2UgYm9keSBtYXkgY29udGFpbiBjbHVlcyBhcyB0byB3aGF0IHdlbnQgd3JvbmcsXG4gICAgICBlcnJvciA9IHtcbiAgICAgICAgbWVzc2FnZTogZXJyLmVycm9yIGluc3RhbmNlb2YgT2JqZWN0ID8gZXJyLmVycm9yLm1lc3NhZ2UgOiBlcnIuZXJyb3IgPyBlcnIuZXJyb3IgOiBlcnIubWVzc2FnZSxcbiAgICAgICAgc3RhdHVzOiBlcnIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiBlcnIuc3RhdHVzVGV4dCxcbiAgICAgICAgdXJsOiBlcnIudXJsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgfVxufVxuIl19