/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { switchMap, tap } from 'rxjs/operators';
import { BehaviorSubject, of, timer } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var SystemStateService = /** @class */ (function () {
    function SystemStateService(httpClient) {
        this.httpClient = httpClient;
        this._loggingStatus$ = new BehaviorSubject(true);
    }
    /**
     * @return {?}
     */
    SystemStateService.prototype.checkOnlineStatus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return timer(1000, 30000).pipe(switchMap(function () { return of(navigator.onLine); }), tap(function (onlineStatus) {
            _this._checkLoginStatus(onlineStatus);
        }));
    };
    /**
     * @param {?} isOnline
     * @return {?}
     */
    SystemStateService.prototype._checkLoginStatus = /**
     * @param {?} isOnline
     * @return {?}
     */
    function (isOnline) {
        var _this = this;
        if (isOnline) {
            this.pingServer().subscribe(function (pingResult) {
                _this._loggingStatus$.next(pingResult.loggedIn);
            }, function (error) {
                if (isOnline) {
                    _this._loggingStatus$.next(false);
                }
            });
        }
        else {
            this._loggingStatus$.next(true);
        }
    };
    /**
     * @return {?}
     */
    SystemStateService.prototype.getLoginStatus = /**
     * @return {?}
     */
    function () {
        return this._loggingStatus$.asObservable();
    };
    /**
     * @return {?}
     */
    SystemStateService.prototype.pingServer = /**
     * @return {?}
     */
    function () {
        return this.httpClient.get('../../../dhis-web-commons-stream/ping.action');
    };
    SystemStateService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    SystemStateService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SystemStateService.ngInjectableDef = i0.defineInjectable({ factory: function SystemStateService_Factory() { return new SystemStateService(i0.inject(i1.HttpClient)); }, token: SystemStateService, providedIn: "root" });
    return SystemStateService;
}());
export { SystemStateService };
function SystemStateService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemStateService.prototype._loggingStatus$;
    /** @type {?} */
    SystemStateService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGlzcHR6L25neC1kaGlzMi1tZW51LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N5c3RlbS1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFjLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztJQU01RCw0QkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTsrQkFGVSxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUM7S0FHckY7Ozs7SUFFRCw4Q0FBaUI7OztJQUFqQjtRQUFBLGlCQUlDO1FBSEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxVQUFDLFlBQVk7WUFDckYsS0FBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3RDLENBQUMsQ0FBQyxDQUFDO0tBQ0w7Ozs7O0lBRU8sOENBQWlCOzs7O2NBQUMsUUFBaUI7O1FBRXpDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFYixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsVUFBZTtnQkFDMUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2hELEVBQUUsVUFBQyxLQUFLO2dCQUNQLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2xDO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pDOzs7OztJQUdILDJDQUFjOzs7SUFBZDtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0tBQzVDOzs7O0lBRUQsdUNBQVU7OztJQUFWO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7S0FDNUU7O2dCQW5DRixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O2dCQUx2QixVQUFVOzs7NkJBQW5COztTQU1hLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgb2YsIE9ic2VydmFibGUsIHRpbWVyIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIFN5c3RlbVN0YXRlU2VydmljZSB7XG4gIHByaXZhdGUgX2xvZ2dpbmdTdGF0dXMkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRydWUpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICB9XG5cbiAgY2hlY2tPbmxpbmVTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRpbWVyKDEwMDAsIDMwMDAwKS5waXBlKHN3aXRjaE1hcCgoKSA9PiBvZihuYXZpZ2F0b3Iub25MaW5lKSksIHRhcCgob25saW5lU3RhdHVzKSA9PiB7XG4gICAgICB0aGlzLl9jaGVja0xvZ2luU3RhdHVzKG9ubGluZVN0YXR1cyk7XG4gICAgfSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2hlY2tMb2dpblN0YXR1cyhpc09ubGluZTogYm9vbGVhbikge1xuXG4gICAgaWYgKGlzT25saW5lKSB7XG5cbiAgICAgIHRoaXMucGluZ1NlcnZlcigpLnN1YnNjcmliZSgocGluZ1Jlc3VsdDogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuX2xvZ2dpbmdTdGF0dXMkLm5leHQocGluZ1Jlc3VsdC5sb2dnZWRJbik7XG4gICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKGlzT25saW5lKSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2luZ1N0YXR1cyQubmV4dChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sb2dnaW5nU3RhdHVzJC5uZXh0KHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGdldExvZ2luU3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2dnaW5nU3RhdHVzJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHBpbmdTZXJ2ZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCgnLi4vLi4vLi4vZGhpcy13ZWItY29tbW9ucy1zdHJlYW0vcGluZy5hY3Rpb24nKTtcbiAgfVxufVxuIl19